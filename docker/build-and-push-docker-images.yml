name: Build & Push Docker Images

on:
  workflow_call:
    inputs:
      upstream_full_name:
        type: string
        required: true
      origin_tags:
        type: string
        required: true
      registry:
        type: string
        required: true
    secrets:
      DH_PAT:
        required: true

env:
  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  DH_OWNER: ${{ vars.DH_USERNAME }}
  DH_PAT: ${{ secrets.DH_PAT }}
  ORIGIN_OWNER: ${{ github.actor }}
  ORIGIN_REPO_NAME: ${{ github.event.repository.name }}
  ORIGIN_REPO_FULL: ${{ github.repository }}
  ORIGIN_SERVER_URL: ${{ github.server_url }}
  GHCR_API_PREFIX: ${{ github.event.repository.owner.type == 'Organization' && format('orgs/{0}', github.repository_owner) || format('users/{0}', github.repository_owner) }}"

jobs:
  pre-build:
    name: Pre-Build Setup
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: read
    outputs:
      buildx_platforms: ${{ steps.detect-platforms.outputs.BUILDX_PLATFORMS }}
      upstream_license: ${{ steps.collect-upstream-metadata.outputs.UPSTREAM_LICENSE }}
      upstream_contributors: ${{ steps.collect-upstream-metadata.outputs.UPSTREAM_CONTRIBUTORS }}
      ghcr_repo_exists: ${{ steps.check-registry.outputs.GHCR_REPO_EXISTS }}
      dh_repo_exists: ${{ steps.check-registry.outputs.DH_REPO_EXISTS }}
      ghcr_versions_json: ${{ steps.analyze-tags.outputs.GHCR_VERSIONS_JSON }}
      dh_versions_json: ${{ steps.analyze-tags.outputs.DH_VERSIONS_JSON }}
      versions_to_test: ${{ steps.analyze-tags.outputs.VERSIONS_TO_TEST }}
      versions_to_delete: ${{ steps.analyze-tags.outputs.VERSIONS_TO_DELETE }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set Up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Detect Supported Buildx Platforms
        id: detect-platforms
        run: |
          set -euo pipefail

          echo "Detecting supported buildx platforms..."
          platforms=$(docker buildx inspect | grep "Platforms:" | sed 's/Platforms: //g' | tr -d ' ')
          if [[ -z "$platforms" ]]; then
            echo "No supported buildx platforms detected"
            exit 1
          fi
          echo "Supported buildx platforms: $platforms"
          echo "BUILDX_PLATFORMS=$platforms" >> "$GITHUB_OUTPUT"

      - name: Collect Upstream Metadata
        id: collect-upstream-metadata
        env:
          UPSTREAM_REPO_FULL: ${{ inputs.upstream_full_name }}
        run: |
          set -euo pipefail

          # Fetching upstream's license information
          echo "Fetching license information from $UPSTREAM_REPO_FULL..."
          max_retries=5
          retry_count=0
          while true; do
            set +e
            response=$(gh api "repos/$UPSTREAM_REPO_FULL" 2>err.log)
            gh_exit=$?
            set -e
            if [[ $gh_exit -eq 0 ]]; then
              if [[ ! -s err.log ]]; then
                license=$(echo "$response" | jq -r '.license.spdx_id // ""')
                if [[ -n "$license" && "$license" != "NOASSERTION" ]]; then
                  echo "Detected license: $license from the upstream repository"
                  echo "UPSTREAM_LICENSE=$license" >> "$GITHUB_OUTPUT"
                else
                  echo "No license detected from the upstream repository"
                  echo "UPSTREAM_LICENSE=" >> "$GITHUB_OUTPUT"
                fi
                break
              fi
              case "$(cat err.log)" in
                *"HTTP 404"*)
                  echo "[ERROR] Upstream repository $UPSTREAM_REPO_FULL does NOT exist (HTTP 404)"
                  exit 1
                  ;;
                *"HTTP 429"*)
                  echo "[ERROR] Rate limit exceeded (HTTP 429). Retrying in 60 seconds... (attempt $((retry_count + 1))/$max_retries)"
                  ((retry_count++))
                  if ((retry_count >= max_retries)); then
                    echo "[ERROR] Rate limit exceeded after $retry_count attempts."
                    exit 1
                  fi
                  sleep 60
                  continue
                  ;;
                *"HTTP 500"*|*"HTTP 502"*|*"HTTP 503"*)
                  echo "[ERROR] GitHub server error. Retrying in 10 seconds... (attempt $((retry_count + 1))/$max_retries)"
                  ((retry_count++))
                  if ((retry_count >= max_retries)); then
                    echo "[ERROR] Server error after $retry_count attempts."
                    exit 1
                  fi
                  sleep 10
                  continue
                  ;;
                *)
                  echo "[ERROR] Unexpected error:"
                  cat err.log
                  exit 1
                  ;;
              esac
            else
              echo "[ERROR] Network or gh api failure. Retrying in 10 seconds... (attempt $((retry_count + 1))/$max_retries)"
              ((retry_count++))
              if ((retry_count >= max_retries)); then
                echo "[ERROR] Network or gh api failure after $retry_count attempts."
                exit 1
              fi
              echo "Retrying in 10 seconds..."
              sleep 10
            fi
          done

          # Fetching upstream's contributor information
          echo "Fetching contributor information from $UPSTREAM_REPO_FULL..."
          max_retries=5
          retry_count=0
          while true; do
            set +e
            response=$(gh api "repos/$UPSTREAM_REPO_FULL/contributors" 2>err.log)
            gh_exit=$?
            set -e
            if [[ $gh_exit -eq 0 ]]; then
              if [[ ! -s err.log ]]; then
                contributors=$(echo "$response" | jq -r '[.[] | select(.type == "User") | .login] | join(",") // ""')
                if [[ -n "$contributors" ]]; then
                  echo "Upstream's contributors: $contributors"
                  echo "UPSTREAM_CONTRIBUTORS=$contributors" >> "$GITHUB_OUTPUT"
                else
                  echo "No contributors detected from the upstream repository"
                  echo "UPSTREAM_CONTRIBUTORS=" >> "$GITHUB_OUTPUT"
                fi
                break
              fi
              case "$(cat err.log)" in
                *"HTTP 404"*)
                  echo "[ERROR] Upstream repository $UPSTREAM_REPO_FULL does NOT exsit (HTTP 404)"
                  exit 1
                  ;;
                *"HTTP 429"*)
                  echo "[ERROR] Rate limit exceeded (HTTP 429). Retrying in 60 seconds... (attempt $((retry_count + 1))/$max_retries)"
                  ((retry_count++))
                  if ((retry_count >= max_retries)); then
                    echo "[ERROR] Rate limit exceeded after $retry_count attempts."
                    exit 1
                  fi
                  sleep 60
                  continue
                  ;;
                *"HTTP 500"*|*"HTTP 502"*|*"HTTP 503"*)
                  echo "[ERROR] GitHub server error (HTTP $http_code). Retrying in 10 seconds... (attempt $((retry_count + 1))/$max_retries)"
                  ((retry_count++))
                  if ((retry_count >= max_retries)); then
                    echo "[ERROR] Server error after $retry_count attempts."
                    exit 1
                  fi
                  sleep 10
                  continue
                  ;;
                *)
                  echo "[ERROR] Unexpected error:"
                  cat err.log
                  exit 1
                  ;;
              esac
            else
              echo "[ERROR] Network or gh api failure. Retrying in 10 seconds... (attempt $((retry_count + 1))/$max_retries)"
              ((retry_count++))
              if ((retry_count >= max_retries)); then
                echo "[ERROR] Network or gh api failure after $retry_count attempts."
                exit 1
              fi
              echo "Retrying in 10 seconds..."
              sleep 10
            fi
          done

      - name: Check Registry Repository Existence
        id: check-registry
        run: |
          set -euo pipefail

          echo "Starting registry existence check..."
          case "${{ inputs.registry }}" in
            "ghcr")
              echo "Checking GHCR repository..."
              max_retries=5
              retry_count=0
              while true; do
                set +e
                response=$(gh api "$GHCR_API_PREFIX/packages/container/$ORIGIN_REPO_NAME" 2>err.log)
                gh_exit=$?
                set -e
                if [[ $gh_exit -eq 0 ]]; then
                  if [[ ! -s err.log ]]; then
                    echo "GHCR repository exists: $ORIGIN_REPO_FULL"
                    echo "GHCR_REPO_EXISTS=true" >> "$GITHUB_OUTPUT"
                    break
                  fi
                  case "$(cat err.log)" in
                    *"HTTP 404"*)
                      echo "[ERROR] GHCR repository does NOT exist (HTTP 404)"
                      echo "GHCR_REPO_EXISTS=false" >> "$GITHUB_OUTPUT"
                      break
                      ;;
                    *"HTTP 429"*)
                      echo "[ERROR] Rate limit exceeded (HTTP 429). Retrying in 60 seconds... (attempt $((retry_count + 1))/$max_retries)"
                      ((retry_count++))
                      if ((retry_count >= max_retries)); then
                        echo "[ERROR] Rate limit exceeded after $retry_count attempts."
                        exit 1
                      fi
                      sleep 60
                      continue
                      ;;
                    *"HTTP 500"*|*"HTTP 502"*|*"HTTP 503"*)
                      echo "[ERROR] GHCR server error. Retrying in 10 seconds... (attempt $((retry_count + 1))/$max_retries)"
                      ((retry_count++))
                      if ((retry_count >= max_retries)); then
                        echo "[ERROR] Server error after $retry_count attempts."
                        exit 1
                      fi
                      sleep 10
                      continue
                      ;;
                    *)
                      echo "[ERROR] Unexpected error:"
                      cat err.log
                      exit 1
                      ;;
                  esac
                else
                  echo "[ERROR] Network or gh api failure. Retrying in 10 seconds... (attempt $((retry_count + 1))/$max_retries)"
                  ((retry_count++))
                  if ((retry_count >= max_retries)); then
                    echo "[ERROR] Network or gh api failure after $retry_count attempts."
                    exit 1
                  fi
                  echo "Retrying in 10 seconds..."
                  sleep 10
                fi
              done
              ;;
          
            "dockerhub")
              echo "Checking Docker Hub repository..."
              repo_url="https://hub.docker.com/v2/repositories/$DH_OWNER/$ORIGIN_REPO_NAME/"
              max_retries=5
              retry_count=0
              while true; do
                set +e
                http_code=$(curl -sL -o /dev/null -w "%{http_code}" "$repo_url")
                curl_exit=$?
                set -e
                if [[ $curl_exit -eq 0 ]]; then
                  case "$http_code" in
                    200)
                      echo "Docker Hub repository exists: $DH_OWNER/$ORIGIN_REPO_NAME"
                      echo "DH_REPO_EXISTS=true" >> "$GITHUB_OUTPUT"
                      break
                      ;;
                    404)
                      echo "[ERROR] Docker Hub repository does NOT exist (HTTP 404)"
                      echo "DH_REPO_EXISTS=false" >> "$GITHUB_OUTPUT"
                      break
                      ;;
                    429)
                      echo "[ERROR] Rate limit exceeded (HTTP 429). Retrying in 60 seconds... (attempt $((retry_count + 1))/$max_retries)"
                      ((retry_count++))
                      if ((retry_count >= max_retries)); then
                        echo "[ERROR] Rate limit exceeded after $retry_count attempts."
                        exit 1
                      fi
                      sleep 60
                      ;;
                    500|502|503)
                      echo "[ERROR] Docker Hub server error (HTTP $http_code). Retrying in 10 seconds... (attempt $((retry_count + 1))/$max_retries)"
                      ((retry_count++))
                      if ((retry_count >= max_retries)); then
                        echo "[ERROR] Server error after $retry_count attempts."
                        exit 1
                      fi
                      sleep 10
                      ;;
                    *)
                      echo "[ERROR] Unexpected HTTP status (HTTP $http_code)"
                      exit 1
                      ;;
                  esac
                else
                  echo "[ERROR] Network or curl failure. Retrying in 10 seconds... (attempt $((retry_count + 1))/$max_retries)"
                  ((retry_count++))
                  if ((retry_count >= max_retries)); then
                    echo "[ERROR] Network or curl failure after $retry_count attempts."
                    exit 1
                  fi
                  sleep 10
                fi
              done
              ;;
            
            *)
              echo "Error: Unsupported registry '${{ inputs.registry }}'" >&2
              exit 1
              ;;
          esac

      - name: Analyze Registry Tags
        id: analyze-tags
        env:
          ORIGIN_TAGS: ${{ inputs.origin_tags }}
        run: |
          set -euo pipefail

          mapfile -t origin_tags < <(echo "$ORIGIN_TAGS" | jq -r '.[]')
          tags_with_dockerfile=()
          original_state=$(git rev-parse --abbrev-ref HEAD)
          for tag in "${origin_tags[@]}"; do
            if git rev-parse "$tag" >/dev/null 2>&1; then
              if git switch --detach "$tag" >/dev/null 2>&1; then
                if [[ -f Dockerfile ]]; then
                  tags_with_dockerfile+=("$tag")
                fi
                git switch --detach "$original_state" >/dev/null 2>&1
              fi
            fi
          done
          echo "Detected ${#tags_with_dockerfile[@]} tags containing Dockerfile in origin Github repository"

          versions_to_delete=()
          versions_to_test=()

          case "${{ inputs.registry }}" in
            "ghcr")
              echo "Analyzing GHCR tags..."
              max_retries=5
              retry_count=0
              versions=""
              while true; do
                set +e
                versions=$(gh api --paginate "$GHCR_API_PREFIX/packages/container/$ORIGIN_REPO_NAME/versions?per_page=100" 2>err.log)
                gh_exit=$?
                set -e
                if [[ $gh_exit -eq 0 ]]; then
                  if [[ ! -s err.log ]]; then
                    echo "GHCR package exists. Parsing tags..."
                    mapfile -t ghcr_tags < <(echo "$versions" | jq -r '.[] | .metadata.container.tags[]?' | grep -E '^(v)?[0-9]+\.[0-9]+\.[0-9]+$')
                    echo "GHCR_VERSIONS_JSON=$(echo "$versions" | jq -sc .)" >> "$GITHUB_OUTPUT"
                    break
                  fi
                  case "$(cat err.log)" in
                    *"HTTP 404"*)
                      echo "[ERROR] GHCR repository does NOT exist (HTTP 404)"
                      echo "GHCR_VERSIONS_JSON=[]" >> "$GITHUB_OUTPUT"
                      break
                      ;;
                    *"HTTP 429"*)
                      echo "[ERROR] Rate limit exceeded (HTTP 429). Retrying in 60 seconds... (attempt $((retry_count + 1))/$max_retries)"
                      ((retry_count++))
                      if ((retry_count >= max_retries)); then
                        echo "[ERROR] Rate limit exceeded after $retry_count attempts."
                        exit 1
                      fi
                      sleep 60
                      continue
                      ;;
                    *"HTTP 500"*|*"HTTP 502"*|*"HTTP 503"*)
                      echo "[ERROR] GHCR server error. Retrying in 10 seconds... (attempt $((retry_count + 1))/$max_retries)"
                      ((retry_count++))
                      if ((retry_count >= max_retries)); then
                        echo "[ERROR] Server error after $retry_count attempts."
                        exit 1
                      fi
                      sleep 10
                      continue
                      ;;
                    *)
                      echo "[ERROR] Unexpected error:"
                      cat err.log
                      exit 1
                      ;;
                  esac
                else
                  echo "[ERROR] Network or gh api failure. Retrying in 10 seconds... (attempt $((retry_count + 1))/$max_retries)"
                  ((retry_count++))
                  if ((retry_count >= max_retries)); then
                    echo "[ERROR] Network or gh api failure after $retry_count attempts."
                    exit 1
                  fi
                  sleep 10
                fi
              done

              for tag in "${ghcr_tags[@]}"; do
                if ! printf '%s\n' "${tags_with_dockerfile[@]}" | grep -Fxq "$tag"; then
                  versions_to_delete+=("$tag")
                fi
              done

              for tag in "${tags_with_dockerfile[@]}"; do
                if ! printf '%s\n' "${ghcr_tags[@]}" | grep -Fxq "$tag"; then
                  versions_to_test+=("$tag")
                fi
              done
              ;;

            "dockerhub")
              echo "Analyzing Docker Hub tags..."
              next_url="https://hub.docker.com/v2/repositories/$DH_OWNER/$ORIGIN_REPO_NAME/tags?page_size=100"
              dh_versions_json=""
              dh_tags=()
              max_retries=5
              retry_count=0
              while [[ -n "$next_url" ]]; do
                set +e
                response=$(curl -sL -w "%{http_code}" "$next_url")
                curl_exit=$?
                set -e
                if [[ $curl_exit -eq 0 ]]; then
                  http_code="${response: -3}"
                  dh_body="${response::-3}"
                  case "$http_code" in
                    200)
                      echo "Repo exists, parsing tags..."
                      dh_versions+=$(echo "$dh_body" | jq -c '.results[]')$'\n'
                      mapfile -t batch_tags < <(echo "$dh_body" | jq -r '.results[].name // empty' | grep -E '^(v)?[0-9]+\.[0-9]+\.[0-9]+$')
                      dh_tags+=("${batch_tags[@]}")
                      next_url=$(echo "$dh_body" | jq -r '.next // empty')
                      retry_count=0
                      ;;
                    404)
                      echo "[ERROR] Docker Hub repository does NOT exsit (HTTP 404)."
                      exit 1
                      ;;
                    429)
                      echo "[ERROR] Rate limit exceeded (HTTP 429). Retrying in 60 seconds..."
                      ((retry_count++))
                      if ((retry_count >= max_retries)); then
                        echo "[ERROR] Rate limit exceeded after $retry_count attempts."
                        exit 1
                      fi
                      sleep 60
                      ;;
                    500|502|503)
                      echo "[ERROR] Docker Hub server error (HTTP $http_code). Retrying in 10 seconds..."
                      ((retry_count++))
                      if ((retry_count >= max_retries)); then
                        echo "[ERROR] Server error after $retry_count attempts."
                        exit 1
                      fi
                      sleep 10
                      ;;
                    *)
                      echo "[ERROR] Unexpected HTTP status (HTTP $http_code)"
                      exit 1
                      ;;
                  esac
                else
                  echo "[ERROR] Network or curl failure. Retrying in 10 seconds... (attempt $((retry_count + 1))/$max_retries)"
                  ((retry_count++))
                  if ((retry_count >= max_retries)); then
                    echo "[ERROR] Network or curl failure after $retry_count attempts."
                    exit 1
                  fi
                  sleep 10
                fi
              done

              if [[ -n "$dh_versions" ]]; then
                echo "DH_VERSIONS_JSON=$(echo "$dh_versions" | jq -sc .)" >> "$GITHUB_OUTPUT"
              else
                echo "DH_VERSIONS_JSON=[]" >> "$GITHUB_OUTPUT"
              fi

              for tag in "${dh_tags[@]}"; do
                if ! printf '%s\n' "${tags_with_dockerfile[@]}" | grep -Fxq "$tag"; then
                  versions_to_delete+=("$tag")
                fi
              done

              for tag in "${tags_with_dockerfile[@]}"; do
                if ! printf '%s\n' "${dh_tags[@]}" | grep -Fxq "$tag"; then
                  versions_to_test+=("$tag")
                fi
              done
              ;;
            
            *)
              echo "Error: Unsupported registry '${{ inputs.registry }}'"
              exit 1
              ;;
          esac

          echo "VERSIONS_TO_TEST=$(printf '%s\n' "${versions_to_test[@]}" | jq -R . | jq -sc .)" >> "$GITHUB_OUTPUT"
          echo "VERSIONS_TO_DELETE=$(printf '%s\n' "${versions_to_delete[@]}" | jq -R . | jq -sc .)" >> "$GITHUB_OUTPUT"
        shell: bash

  test-images:
    name: Test Docker Images
    needs: pre-build
    runs-on: ubuntu-latest
    outputs:
      passed_tags_platforms_json: ${{ steps.test.outputs.PASSED_TAGS_PLATFORMS_JSON }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set Up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Test Docker Images for All Platforms
        id: test
        env:
          BUILDX_PLATFORMS: ${{ needs.pre-build.outputs.buildx_platforms }}
          VERSIONS_TO_TEST: ${{ needs.pre-build.outputs.versions_to_test }}
        run: |
          set -euo pipefail

          if [[ "$VERSIONS_TO_TEST" == "[]" ]]; then
            echo "No tags to test"
            echo "passed_tags_platforms_json={}" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          original_state=$(git rev-parse --abbrev-ref HEAD)
          mapfile -t tags < <(echo "$VERSIONS_TO_TEST" | jq -r '.[]')

          declare -A passed_tag_platforms
          declare -a passed_tags

          for tag in "${tags[@]}"; do
            echo "Testing multi-arch image for tag: $tag"
            if ! git switch --detach "$tag"; then
              echo "[ERROR] Failed to switch to tag: $tag"
              git switch --detach "$original_state"
              continue
            fi

            test_passed=false
            passed_platforms=()
            IFS=',' read -ra platforms <<< "$BUILDX_PLATFORMS"
            for platform in "${platforms[@]}"; do
              test_tag="$tag-$(echo $platform | tr '/' '-')-test"

              echo "Building for $platform, tag: $tag..."
              if docker buildx build --platform "$platform" --load -t "$test_tag" .; then
                echo "Running test for $platform, tag: $tag..."
                if docker run --rm "$test_tag" true; then
                  passed_platforms+=("$platform")
                  test_passed=true
                else
                  echo "[ERROR] Smoke test failed for $platform, tag: $tag"
                fi
              else
                echo "[ERROR] Build failed for $platform, tag: $tag"
              fi
              docker rmi "$test_tag"
            done

            git switch --detach "$original_state"

            if [[ "$test_passed" == true ]]; then
              passed_tags+=("$tag")
              passed_tag_platforms["$tag"]="${passed_platforms[*]}"
              echo "[SUCCESS] Tag: \"$tag\" passed test on platforms: [${passed_platforms[*]}]"
            else
              echo "[SKIP] Tag: \"$tag\" did not pass any platform tests and will not be pushed."
            fi
          done

          echo "PASSED_TAGS_PLATFORMS_JSON=$(
            jq -nc 'reduce inputs as $map ({}; . + $map)' < <(
              for tag in "${passed_tags[@]}"; do
                jq -n --arg tag "$tag" --argjson platforms "$(
                  printf '%s\n' ${passed_tag_platforms[$tag]} | jq -R . | jq -sc .
                )" '{($tag): $platforms}'
              done
            )
          )" >> "$GITHUB_OUTPUT"

  build-and-push-ghcr:
    name: Build & Push to GHCR
    if: ${{ inputs.registry == 'ghcr' }}
    needs: [pre-build, test-images]
    permissions:
      contents: read
      packages: write
    runs-on: ubuntu-latest
    env:
      BUILDX_PLATFORMS: ${{ needs.pre-build.outputs.buildx_platforms }}
      TAGS_PLATFORMS_JSON: ${{ needs.test-images.outputs.passed_tags_platforms_json }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set Up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Remove Deprecated Images From GHCR
        id: remove-deprecated-ghcr
        if: ${{ needs.pre-build.outputs.versions_to_delete != '[]' }}
        env:
          VERSIONS_TO_DELETE: ${{ needs.pre-build.outputs.versions_to_delete }}
          GHCR_VERSIONS_JSON: ${{ needs.pre-build.outputs.ghcr_versions_json }}
        run: |
          set -euo pipefail

          echo "Removing deprecated images from GHCR..."
          for tag in $(echo "$VERSIONS_TO_DELETE" | jq -r '.[]'); do
            # Find the version ID for this tag
            version_id=$(echo "$GHCR_VERSIONS_JSON" | jq -r --arg tag "$tag" '.[] | select(.metadata.container.tags[]? == $tag) | .id' | head -n1)
            if [[ -z "$version_id" ]]; then
              echo "Could not find version ID for tag: $tag"
              continue
            fi

            max_retries=5
            retry_count=0
            while true; do
              set +e
              gh api --method DELETE "$GHCR_API_PREFIX/packages/container/$ORIGIN_REPO_NAME/versions/$version_id" 2>err.log
              gh_exit=$?
              set -e
              if [[ $gh_exit -eq 0 ]]; then
                if [[ ! -s err.log ]]; then
                  echo "Successfully deleted version ID: $version_id (tag: $tag)"
                  break
                fi
                case "$(cat err.log)" in
                  *"HTTP 429"*)
                    echo "[ERROR] Rate limit exceeded (HTTP 429). Retrying in 60 seconds... (attempt $((retry_count + 1))/$max_retries)"
                    ((retry_count++))
                    if ((retry_count >= max_retries)); then
                      echo "[ERROR] Rate limit exceeded after $retry_count attempts."
                      exit 1
                    fi
                    sleep 60
                    ;;
                  *"HTTP 500"*|*"HTTP 502"*|*"HTTP 503"*)
                    echo "[ERROR] GHCR server error. Retrying in 10 seconds... (attempt $((retry_count + 1))/$max_retries)"
                    ((retry_count++))
                    if ((retry_count >= max_retries)); then
                      echo "[ERROR] Server error after $retry_count attempts."
                      exit 1
                    fi
                    sleep 10
                    ;;
                  *)
                    echo "[ERROR] Unexpected error:"
                    cat err.log
                    exit 1
                    ;;
                esac
              else
                echo "[ERROR] Network or gh api failure. Retrying in 10 seconds... (attempt $((retry_count + 1))/$max_retries)"
                ((retry_count++))
                if ((retry_count >= max_retries)); then
                  echo "[ERROR] Network or gh api failure after $retry_count attempts."
                  exit 1
                fi
                sleep 10
              fi
            done
          done
          echo "Cleanup completed"

          new_ghcr_versions=$(jq --argjson del "$VERSIONS_TO_DELETE" '
            [ .[]
              | .metadata.container.tags[]?
              | select(
                  (test("^v?[0-9]+\\.[0-9]+\\.[0-9]+$"))
                  and (IN(. ; $del[]) | not)
                )
            ]
          ' <<< "$GHCR_VERSIONS_JSON")

          if [[ "$new_ghcr_versions" == "[]" ]]; then
            echo "No tags remain after deletion."
            new_latest_tag=""
          else
            new_latest_tag=$(echo "$new_ghcr_versions" | jq -r '.[]' | grep -E '^v?[0-9]+\.[0-9]+\.[0-9]+$' | sort -V | tail -n1)
          fi

          if [[ -n "$new_latest_tag" ]]; then
            echo "Pulling $new_latest_tag and re-tagging as latest..."
            docker pull "ghcr.io/$ORIGIN_OWNER/$ORIGIN_REPO_NAME:$new_latest_tag"
            docker tag "ghcr.io/$ORIGIN_OWNER/$ORIGIN_REPO_NAME:$new_latest_tag" "ghcr.io/$ORIGIN_OWNER/$ORIGIN_REPO_NAME:latest"
            docker push "ghcr.io/$ORIGIN_OWNER/$ORIGIN_REPO_NAME:latest"
            echo "Re-tagged $new_latest_tag as latest."
          else
            echo "Latest tag is intact, no re-tagging needed"
          fi

      - name: Build and Push GHCR Images
        if: ${{ needs.test-images.outputs.passed_tags_platforms_json != '{}' }}
        run: |
          set -euo pipefail

          tags=$(echo "$TAGS_PLATFORMS_JSON" | jq -r 'keys[]')
          original_state=$(git rev-parse --abbrev-ref HEAD)

          derive_shorthand_tags() {
            local tag="$1"
            local prefix=""
            if [[ "$tag" =~ ^v([0-9]+)\.([0-9]+)\.([0-9]+)$ ]]; then
              prefix="v"
              major="${BASH_REMATCH[1]}"
              minor="${BASH_REMATCH[2]}"
              echo "${prefix}${major}"
              echo "${prefix}${major}.${minor}"
            elif [[ "$tag" =~ ^([0-9]+)\.([0-9]+)\.([0-9]+)$ ]]; then
              major="${BASH_REMATCH[1]}"
              minor="${BASH_REMATCH[2]}"
              echo "${major}"
              echo "${major}.${minor}"
            fi
          }

          latest_tag=$(echo "$tags" | grep -E '^v?[0-9]+\.[0-9]+\.[0-9]+$' | sort -V | tail -n1)
          echo "Latest tag applied to $latest_tag"

          for tag in $tags; do
            platforms=$(echo "$TAGS_PLATFORMS_JSON" | jq -r --arg tag "$tag" '.[$tag] | join(",")')

            echo "Building multi-arch image for tag: $tag"
            if ! git switch --detach "$tag"; then
              echo "[ERROR] Failed to switch to tag: $tag"
              git switch --detach "$original_state"
              exit 1
            fi

            build_args=(
              # OCI labels (affecting the image digest)
              --label "org.opencontainers.image.title=$ORIGIN_REPO_NAME"
              --label "org.opencontainers.image.version=$tag"
              --label "org.opencontainers.image.created=$(git log -1 --format=%aI "$tag")"
              --label "org.opencontainers.image.authors=${{ needs.pre-build.outputs.upstream_contributors }}"
              --label "org.opencontainers.image.revision=$(git rev-parse "$tag")"
            
              # OCI annotations (NOT affecting the image digest)
              --annotation "org.opencontainers.image.description=Docker image built from $ORIGIN_SERVER_URL/$ORIGIN_REPO_FULL"
              --annotation "org.opencontainers.image.documentation=$ORIGIN_SERVER_URL/$ORIGIN_REPO_FULL/docs"
              --annotation "org.opencontainers.image.source=$ORIGIN_SERVER_URL/$ORIGIN_REPO_FULL"
              --annotation "org.opencontainers.image.url=https://github.com/$ORIGIN_OWNER/$ORIGIN_REPO_NAME/packages"

              # Cache (NOT affecting the image digest)
              --cache-from "type=registry,ref=ghcr.io/$ORIGIN_OWNER/$ORIGIN_REPO_NAME:cache-$tag"
              --cache-to "type=registry,ref=ghcr.io/$ORIGIN_OWNER/$ORIGIN_REPO_NAME:cache-$tag,mode=max"

              # Platform/Architecture (NOT affecting the image digest)
              --platform "$platforms"

              # Output/Tagging (NOT affecting the image digest)
              --push
              --tag "ghcr.io/$ORIGIN_OWNER/$ORIGIN_REPO_NAME:$tag"
            )

            # Add license label if available
            if [[ -n "${{ needs.pre-build.outputs.upstream_license }}" ]]; then
              build_args+=(--label "org.opencontainers.image.licenses=${{ needs.pre-build.outputs.upstream_license }}")
            fi

            # Add shorthand tags
            shorthand_tags=()
            while read -r shorthand_tag; do
              [[ -n "$shorthand_tag" && "$shorthand_tag" != "$tag" ]] && shorthand_tags+=("$shorthand_tag")
            done < <(derive_shorthand_tags "$tag")
            for shorthand_tag in "${shorthand_tags[@]}"; do
              build_args+=(--tag "ghcr.io/$ORIGIN_OWNER/$ORIGIN_REPO_NAME:$shorthand_tag")
            done

            # Add latest tag if applicable
            if [[ "$tag" == "$latest_tag" ]]; then
              build_args+=(--tag "ghcr.io/$ORIGIN_OWNER/$ORIGIN_REPO_NAME:latest")
            fi

            # Execute build
            echo "[INFO] Building and pushing multi-arch image: Tag \"$tag\" | Platforms: [$platforms] → GHCR"
            if ! docker buildx build "${build_args[@]}" .; then
              echo "[ERROR] Failed to build/push for tag: $tag"
              git switch --detach "$original_state"
              exit 1
            fi
            echo "[SUCCESS] Built and pushed multi-arch image for tag: $tag"
            git switch --detach "$original_state"

            # Initialize GHCR repository settings
            if [[ "${{ needs.pre-build.outputs.ghcr_repo_exists }}" == "false" ]]; then
              echo "Initializing GHCR repository settings..."
              max_retries=5
              retry_count=0
              package_id=""
              while true; do
                set +e
                package_id=$(gh api "$GHCR_API_PREFIX/packages/container/$ORIGIN_REPO_NAME" --jq '.id' 2>/dev/null || true)
                gh_exit=$?
                set -e
                if [[ $gh_exit -eq 0 ]]; then
                  if [[ ! -s err.log ]]; then
                    echo "GHCR repository is active, package ID: $package_id"
                    break
                  fi
                  case "$(cat err.log)" in
                    *"HTTP 404"*)
                      echo "[ERROR] GHCR package does NOT exsit yet (HTTP 404). Retrying in 10 seconds... (attempt $((retry_count + 1))/$max_retries)"
                      ((retry_count++))
                      if ((retry_count >= max_retries)); then
                        echo "[ERROR] GHCR package does NOT exsit after $retry_count attempts (HTTP 404)."
                        exit 1
                      fi
                      sleep 10
                      continue
                      ;;
                    *"HTTP 429"*)
                      echo "[ERROR] Rate limit exceeded (HTTP 429). Retrying in 60 seconds..."
                      ((retry_count++))
                      if ((retry_count >= max_retries)); then
                        echo "[ERROR] Rate limit exceeded after $retry_count attempts."
                        exit 1
                      fi
                      sleep 60
                      continue
                      ;;
                    *"HTTP 500"*|*"HTTP 502"*|*"HTTP 503"*)
                      echo "[ERROR] GHCR server error. Retrying in 10 seconds..."
                      ((retry_count++))
                      if ((retry_count >= max_retries)); then
                        echo "[ERROR] Server error after $retry_count attempts."
                        exit 1
                      fi
                      sleep 10
                      continue
                      ;;
                    *)
                      echo "[ERROR] Unexpected error:"
                      cat err.log
                      exit 1
                      ;;
                  esac
                else
                  echo "[ERROR] Network or gh api failure. Retrying in 10 seconds..."
                  ((retry_count++))
                  if ((retry_count >= max_retries)); then
                    echo "[ERROR] Network or gh api failure after $retry_count attempts."
                    exit 1
                  fi
                  sleep 10
                fi
              done

              if [[ -n "$package_id" ]]; then
                # Set package visibility to public
                gh api graphql -f query='
                  mutation($input: ChangePackageVisibilityInput!) {
                    changePackageVisibility(input: $input) {
                      package { id visibility }
                    }
                  }' -f input='{"packageId":"'"$package_id"'","visibility":"PUBLIC"}'
                echo "GHCR repository set to public"

                # Update repo description
                gh api --method PATCH \
                  -H "Accept: application/vnd.github+json" \
                  -H "X-GitHub-Api-Version: 2022-11-28" \
                  "$GHCR_API_PREFIX/packages/container/$ORIGIN_REPO_NAME" \
                  -f description="Docker image built from $ORIGIN_SERVER_URL/$ORIGIN_REPO_FULL" \
                  -f repository_url="$ORIGIN_SERVER_URL/$ORIGIN_REPO_FULL"
                echo "[SUCCESS] GHCR repository description updated"
              fi
            fi
          done
        shell: bash

  build-and-push-dockerhub:
    name: Build & Push to Docker Hub
    if: ${{ inputs.registry == 'dockerhub' }}
    needs: [pre-build, test-images]
    permissions:
      contents: read
    runs-on: ubuntu-latest
    env:
      BUILDX_PLATFORMS: ${{ needs.pre-build.outputs.buildx_platforms }}
      TAGS_PLATFORMS_JSON: ${{ needs.test-images.outputs.passed_tags_platforms_json }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set Up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DH_USERNAME }}
          password: ${{ secrets.DH_PAT }}

      - name: Remove Deprecated Images From Docker Hub
        if: ${{ needs.pre-build.outputs.versions_to_delete != '[]' }}
        env:
          VERSIONS_TO_DELETE: ${{ needs.pre-build.outputs.versions_to_delete }}
          DH_VERSIONS_JSON: ${{ needs.pre-build.outputs.dh_versions_json }}
        run: |
          set -euo pipefail

          echo "Removing deprecated images from Docker Hub..."

          declare -A tag_to_digest
          declare -A digest_to_tags

          mapfile -t all_tags < <(echo "$DH_VERSIONS_JSON" | jq -r '.[] | .name')
          mapfile -t all_digests < <(echo "$DH_VERSIONS_JSON" | jq -r '.[] | .digest')

          for i in "${!all_tags[@]}"; do
            tag="${all_tags[$i]}"
            digest="${all_digests[$i]}"
            tag_to_digest["$tag"]="$digest"
            if [[ -n "$digest" ]]; then
              digest_to_tags["$digest"]+="$tag "
            fi
          done

          latest_deleted=false
          for version in $(echo "$VERSIONS_TO_DELETE" | jq -r '.[]'); do
            digest="${tag_to_digest[$version]}"
            tags="${digest_to_tags[$digest]}"
            if echo "$tags" | grep -wq "latest"; then
              latest_deleted=true
              echo "The 'latest' tag will be deleted with digest: $digest"
            fi
            for tag in $tags; do
              echo "Deleting tag: $tag (digest: $digest)..."
              max_retries=5
              retry_count=0
              while true; do
                set +e
                http_code=$(curl -sL -u "$DH_OWNER:$DH_PAT" -o /dev/null -w "%{http_code}" -X DELETE \
                  "https://hub.docker.com/v2/repositories/$DH_OWNER/$ORIGIN_REPO_NAME/tags/$tag/")
                curl_exit=$?
                set -e
                if [[ $curl_exit -eq 0 ]]; then
                  case "$http_code" in
                    200|202|204)
                      echo "Successfully deleted tag: $tag"
                      retry_count=0
                      break
                      ;;
                    401|403)
                      echo "[ERROR] Unauthorized or forbidden (HTTP $http_code). Check your Docker Hub credentials and permissions."
                      exit 1
                      ;;
                    404)
                      echo "[ERROR] Tag $tag does NOT exist (HTTP 404). Skipping."
                      break
                      ;;
                    409)
                      echo "[ERROR] Conflict (HTTP 409). The resource may be in use or locked. Retrying in 10 seconds... (attempt $((retry_count + 1))/$max_retries)"
                      ((retry_count++))
                      if ((retry_count >= max_retries)); then
                        echo "[ERROR] Conflict (HTTP 409) after $retry_count attempts. Giving up."
                        exit 1
                      fi
                      sleep 10
                      ;;
                    429)
                      echo "[ERROR] Rate limit exceeded (HTTP 429). Retrying in 60 seconds... (attempt $((retry_count + 1))/$max_retries)"
                      ((retry_count++))
                      if ((retry_count >= max_retries)); then
                        echo "[ERROR] Rate limit exceeded after $retry_count attempts."
                        exit 1
                      fi
                      sleep 60
                      ;;
                    500|502|503)
                      echo "[ERROR] Docker Hub server error (HTTP $http_code). Retrying in 10 seconds... (attempt $((retry_count + 1))/$max_retries)"
                      ((retry_count++))
                      if ((retry_count >= max_retries)); then
                        echo "[ERROR] Server error after $retry_count attempts."
                        exit 1
                      fi
                      sleep 10
                      ;;
                    *)
                      echo "[ERROR] Unexpected HTTP status (HTTP $http_code)."
                      exit 1
                      ;;
                  esac
                else
                  echo "[ERROR] Network or curl failure. Retrying in 10 seconds... (attempt $((retry_count + 1))/$max_retries)"
                  ((retry_count++))
                  if ((retry_count >= max_retries)); then
                    echo "[ERROR] Network or curl failure after $retry_count attempts."
                    exit 1
                  fi
                  sleep 10
                fi
              done
            done
          done
          echo "Cleanup completed"

          if [[ "$latest_deleted" == "true" ]]; then
            echo "Re-tagging the new latest version as 'latest'..."
            mapfile -t remaining_semver_tags < <(
              echo "$DH_VERSIONS_JSON" | jq -r '.[] | .name' | \
                grep -E '^v?[0-9]+\.[0-9]+\.[0-9]+$' | \
                grep -vxFf <(printf '%s\n' "${tags_deleted[@]}")
            )

            if [[ ${#remaining_semver_tags[@]} -eq 0 ]]; then
              echo "No tag remains after deletion."
              exit 0
            fi

            new_latest_tag=$(printf "%s\n" "${remaining_semver_tags[@]}" | sort -V | tail -n1)
            echo "New latest tag: $new_latest_tag"
            new_latest_digest=$(echo "$DH_VERSIONS_JSON" | jq -r --arg tag "$new_latest_tag" '.[] | select(.name == $tag) | .digest')

            if [[ -z "$new_latest_digest" ]]; then
              echo "[ERROR] Could not find digest for new latest tag: $new_latest_tag"
              exit 1
            fi
            echo "Re-tagging $new_latest_tag (digest: $new_latest_digest) as 'latest'..."
            max_retries=5
            retry_count=0
            while true; do
              set +e
              response=$(curl -sL -o /dev/null -w "%{http_code}" -X POST \
                -u "$DH_OWNER:$DH_PAT" \
                -H "Content-Type: application/json" \
                -d "{\"source_digest\": \"$new_latest_digest\"}" \
                "https://hub.docker.com/v2/repositories/$DH_OWNER/$ORIGIN_REPO_NAME/tags/latest/")
              curl_exit=$?
              set -e
              if [[ $curl_exit -eq 0 ]]; then
                case "$response" in
                  200|201|202)
                    echo "Successfully re-tagged $new_latest_tag (digest: $new_latest_digest) as 'latest'"
                    break
                    ;;
                  401|403)
                    echo "[ERROR] Unauthorized or forbidden (HTTP $response). Check your Docker Hub credentials and permissions."
                    exit 1
                    ;;
                  404)
                    echo "[ERROR] Repository or digest does NOT exist (HTTP 404)."
                    exit 1
                    ;;
                  409)
                    echo "[ERROR] Conflict (HTTP 409). The resource may be in use or locked. Retrying in 10 seconds... (attempt $((retry_count + 1))/$max_retries)"
                    ((retry_count++))
                    if ((retry_count >= max_retries)); then
                      echo "[ERROR] Conflict (HTTP 409) after $retry_count attempts. Giving up."
                      exit 1
                    fi
                    sleep 10
                    ;;
                  429)
                    echo "[ERROR] Rate limit exceeded (HTTP 429). Retrying in 60 seconds... (attempt $((retry_count + 1))/$max_retries)"
                    ((retry_count++))
                    if ((retry_count >= max_retries)); then
                      echo "[ERROR] Rate limit exceeded after $retry_count attempts."
                      exit 1
                    fi
                    sleep 60
                    ;;
                  500|502|503)
                    echo "[ERROR] Docker Hub server error (HTTP $response). Retrying in 10 seconds... (attempt $((retry_count + 1))/$max_retries)"
                    ((retry_count++))
                    if ((retry_count >= max_retries)); then
                      echo "[ERROR] Server error after $retry_count attempts."
                      exit 1
                    fi
                    sleep 10
                    ;;
                  *)
                    echo "[ERROR] Unexpected HTTP status (HTTP $response)."
                    exit 1
                    ;;
                esac
              else
                echo "[ERROR] Network or curl failure. Retrying in 10 seconds... (attempt $((retry_count + 1))/$max_retries)"
                ((retry_count++))
                if ((retry_count >= max_retries)); then
                  echo "[ERROR] Network or curl failure after $retry_count attempts."
                  exit 1
                fi
                sleep 10
              fi
            done
          fi
        shell: bash

      - name: Build and Push Docker Hub Images
        if: ${{ needs.test-images.outputs.passed_tags_platforms_json != '{}' }}
        run: |
          set -euo pipefail

          tags=$(echo "$TAGS_PLATFORMS_JSON" | jq -r 'keys[]')
          original_state=$(git rev-parse --abbrev-ref HEAD)

          derive_shorthand_tags() {
            local tag="$1"
            local prefix=""
            if [[ "$tag" =~ ^v([0-9]+)\.([0-9]+)\.([0-9]+)$ ]]; then
              prefix="v"
              major="${BASH_REMATCH[1]}"
              minor="${BASH_REMATCH[2]}"
              echo "${prefix}${major}"
              echo "${prefix}${major}.${minor}"
            elif [[ "$tag" =~ ^([0-9]+)\.([0-9]+)\.([0-9]+)$ ]]; then
              major="${BASH_REMATCH[1]}"
              minor="${BASH_REMATCH[2]}"
              echo "${major}"
              echo "${major}.${minor}"
            fi
          }

          latest_tag=$(echo "$tags" | grep -E '^v?[0-9]+\.[0-9]+\.[0-9]+$' | sort -V | tail -n1)
          echo "Latest tag applied to $latest_tag"

          for tag in $tags; do
            platforms=$(echo "$TAGS_PLATFORMS_JSON" | jq -r --arg tag "$tag" '.[$tag] | join(",")')

            echo "[INFO] Building multi-arch image for tag: $tag"
            if ! git switch --detach "$tag"; then
              echo "[ERROR] Failed to switch to tag: $tag"
              git switch --detach "$original_state"
              exit 1
            fi

            build_args=(
              # OCI labels (affecting the image digest)
              --label "org.opencontainers.image.title=$ORIGIN_REPO_NAME"
              --label "org.opencontainers.image.version=$tag"
              --label "org.opencontainers.image.created=$(git log -1 --format=%aI "$tag")"
              --label "org.opencontainers.image.authors=${{ needs.pre-build.outputs.upstream_contributors }}"
              --label "org.opencontainers.image.revision=$(git rev-parse "$tag")"

              # OCI annotations (NOT affecting the image digest)
              --annotation "org.opencontainers.image.description=Docker image built from $ORIGIN_SERVER_URL/$ORIGIN_REPO_FULL"
              --annotation "org.opencontainers.image.documentation=$ORIGIN_SERVER_URL/$ORIGIN_REPO_FULL/docs"
              --annotation "org.opencontainers.image.source=$ORIGIN_SERVER_URL/$ORIGIN_REPO_FULL"
              --annotation "org.opencontainers.image.url=https://hub.docker.com/r/$DH_OWNER/$ORIGIN_REPO_NAME"

              # Cache (NOT affecting the image digest)
              --cache-from "type=registry,ref=$DH_OWNER/$ORIGIN_REPO_NAME:cache-$tag"
              --cache-to "type=registry,ref=$DH_OWNER/$ORIGIN_REPO_NAME:cache-$tag,mode=max"

              # Platform/Architecture (NOT affecting the image digest)
              --platform "$platforms"

              # Output/Tagging (NOT affecting the image digest)
              --push
              --tag "$DH_OWNER/$ORIGIN_REPO_NAME:$tag"
            )

            # Add license label if available
            if [[ -n "${{ needs.pre-build.outputs.upstream_license }}" ]]; then
              build_args+=(--label "org.opencontainers.image.licenses=${{ needs.pre-build.outputs.upstream_license }}")
            fi

            # Add shorthand tags
            shorthand_tags=()
            while read -r shorthand_tag; do
              [[ -n "$shorthand_tag" && "$shorthand_tag" != "$tag" ]] && shorthand_tags+=("$shorthand_tag")
            done < <(derive_shorthand_tags "$tag")
            for shorthand_tag in "${shorthand_tags[@]}"; do
              build_args+=(--tag "$DH_OWNER/$ORIGIN_REPO_NAME:$shorthand_tag")
            done

            # Add latest tag if applicable
            if [[ "$tag" == "$latest_tag" ]]; then
              build_args+=(--tag "$DH_OWNER/$ORIGIN_REPO_NAME:latest")
            fi

            # Execute build
            echo "[INFO] Building and pushing multi-arch image: Tag \"$tag\" | Platforms: [$platforms] → Docker Hub"
            if ! docker buildx build "${build_args[@]}" .; then
              echo "[ERROR] Failed to build/push for tag: $tag"
              git switch --detach "$original_state"
              exit 1
            fi

            echo "[SUCCESS] Built and pushed multi-arch image for tag: $tag"
            git switch --detach "$original_state"

            # Initialize Docker Hub repository
            if [[ "${{ needs.pre-build.outputs.dh_repo_exists }}" == "false" ]]; then
              echo "Setting Docker Hub repository description..."

              max_retries=5
              retry_count=0
              while true; do
                set +e
                http_code=$(curl -sL -w "%{http_code}" -u "$DH_OWNER:$DH_PAT" \
                  "https://hub.docker.com/v2/repositories/$DH_OWNER/$ORIGIN_REPO_NAME/")
                curl_exit=$?
                set -e
                if [[ $curl_exit -eq 0 ]]; then
                  case "$http_code" in
                    200)
                      echo "Docker Hub repository is available."
                      break
                      ;;
                    404)
                      echo "[ERROR] Docker Hub repository does NOT exist yet (HTTP 404). Retrying in 10 seconds... (attempt $((retry_count + 1))/$max_retries)"
                      ((retry_count++))
                      if ((retry_count >= max_retries)); then
                        echo "[ERROR] Docker Hub repository does NOT exist after $retry_count attempts (HTTP 404)."
                        exit 1
                      fi
                      sleep 10
                      ;;
                    429)
                      echo "[ERROR] Rate limit exceeded (HTTP 429). Retrying in 60 seconds... (attempt $((retry_count + 1))/$max_retries)"
                      ((retry_count++))
                      if ((retry_count >= max_retries)); then
                        echo "[ERROR] Rate limit exceeded after $retry_count attempts."
                        exit 1
                      fi
                      sleep 60
                      ;;
                    500|502|503)
                      echo "[ERROR] Docker Hub server error (HTTP $http_code). Retrying in 10 seconds... (attempt $((retry_count + 1))/$max_retries)"
                      ((retry_count++))
                      if ((retry_count >= max_retries)); then
                        echo "[ERROR] Server error after $retry_count attempts."
                        exit 1
                      fi
                      sleep 10
                      ;;
                    *)
                      echo "[ERROR] Unexpected HTTP status (HTTP $http_code)"
                      exit 1
                      ;;
                  esac
                else
                  echo "[ERROR] Network or curl failure. Retrying in 10 seconds... (attempt $((retry_count + 1))/$max_retries)"
                  ((retry_count++))
                  if ((retry_count >= max_retries)); then
                    echo "[ERROR] Network or curl failure after $retry_count attempts."
                    exit 1
                  fi
                  sleep 10
                fi
              done

              full_description=$(jq -Rs . < README.md)
              if [[ -z "$full_description" || "$full_description" == "\"\"" ]]; then
                # PATCH without full_description
                if ! curl -X PATCH \
                  -H "Content-Type: application/json" \
                  -u "$DH_OWNER:$DH_PAT" \
                  -d "{
                    \"description\": \"Docker image built from $ORIGIN_SERVER_URL/$ORIGIN_REPO_FULL\"
                  }" \
                  "https://hub.docker.com/v2/repositories/$DH_OWNER/$ORIGIN_REPO_NAME/"; then
                  echo "[ERROR] Failed to update Docker Hub repository description."
                  exit 1
                fi
              else
                # PATCH with full_description
                if ! curl -X PATCH \
                  -H "Content-Type: application/json" \
                  -u "$DH_OWNER:$DH_PAT" \
                  -d "{
                    \"description\": \"Docker image built from $ORIGIN_SERVER_URL/$ORIGIN_REPO_FULL\",
                    \"full_description\": $full_description
                  }" \
                  "https://hub.docker.com/v2/repositories/$DH_OWNER/$ORIGIN_REPO_NAME/"; then
                  echo "[ERROR] Failed to update Docker Hub repository description."
                  exit 1
                fi
              fi
              echo "[SUCCESS] Docker Hub repository description updated"
            fi
          done
        shell: bash